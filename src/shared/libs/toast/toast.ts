import React from 'react'
import { toast } from 'react-toastify'

// –ö–∞—Ä—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–º–µ–Ω –ø–æ–ª–µ–π –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ
const fieldTranslations: Record<string, string> = {
	email: 'Email',
	name: '–§–ò–û',
	// –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

const translateFieldName = (fieldName: string): string => {
	return fieldTranslations[fieldName.toLowerCase()] || fieldName
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Prisma)
const parseUniqueConstraintMessage = (
	message: string,
	targetFields?: string[]
): string | undefined => {
	let fields: string[] = []
	if (targetFields && targetFields.length > 0) {
		fields = targetFields
	} else {
		const uniqueConstraintMatch = message.match(
			/Unique constraint failed on the fields: \(([^)]+)\)/i
		)
		if (uniqueConstraintMatch && uniqueConstraintMatch[1]) {
			fields = uniqueConstraintMatch[1].split(',').map(f => f.trim())
		}
	}

	if (fields.length > 0) {
		const translatedFields = fields.map(translateFieldName).join(', ')
		return `–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—è '${translatedFields}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`
	}

	if (
		message.toLowerCase().includes('unique constraint') ||
		message.toLowerCase().includes('p2002')
	) {
		return '–ó–∞–ø–∏—Å—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
	}
	return undefined
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –æ—à–∏–±–∫–∏
const getErrorMessage = (error: any): string | undefined => {
	if (!error) return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (–æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).'

	// 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ Apollo (–≤–∫–ª—é—á–∞—è ERR_CONNECTION_REFUSED)
	if (error.networkError) {
		// "Failed to fetch" —á–∞—Å—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–ø—Ç–æ–º–æ–º ERR_CONNECTION_REFUSED
		if (
			typeof error.networkError.message === 'string' &&
			error.networkError.message.toLowerCase().includes('failed to fetch')
		) {
			return '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:4000.'
		}
		return typeof error.networkError.message === 'string'
			? `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.networkError.message}`
			: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'
	}

	// 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ GraphQL (–º–∞—Å—Å–∏–≤ graphQLErrors)
	if (Array.isArray(error.graphQLErrors) && error.graphQLErrors.length > 0) {
		const gqlError = error.graphQLErrors[0] // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã

		// –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ extensions (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Prisma)
		if (gqlError.extensions?.originalError) {
			const originalError = gqlError.extensions.originalError
			if (originalError.code === 'P2002') {
				// Prisma unique constraint violation
				return parseUniqueConstraintMessage(
					originalError.message,
					originalError.meta?.target
				)
			}
			if (typeof originalError.message === 'string')
				return originalError.message
		}

		// –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–∞–º–æ–≥–æ graphQLError
		if (typeof gqlError.message === 'string') {
			const parsedGqlMessage = parseUniqueConstraintMessage(gqlError.message)
			if (parsedGqlMessage) return parsedGqlMessage
			return gqlError.message
		}
	}

	// 3. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ error.message
	if (typeof error.message === 'string') {
		const parsedTopLevelMessage = parseUniqueConstraintMessage(error.message)
		if (parsedTopLevelMessage) return parsedTopLevelMessage
		return error.message
	}

	// 4. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
	if (typeof error === 'string') return error

	return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
}

export async function showToastPromise<T>(
	promise: Promise<T>,
	texts?: { pending: string; success: string; error: string }
): Promise<T> {
	const defaultErrorText = texts?.error ?? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò•'
	return await toast.promise(promise, {
		pending: texts?.pending ?? '–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è... ‚è≥',
		success: texts?.success ?? '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! üéâ',
		error: err => {
			const actualErrorMessage = getErrorMessage(err)
			return React.createElement(
				'div',
				null,
				React.createElement('span', null, defaultErrorText),
				actualErrorMessage && React.createElement('br'),
				actualErrorMessage &&
					React.createElement(
						'small',
						{ style: { opacity: 0.8, display: 'block', marginTop: '4px' } },
						actualErrorMessage
					)
			)
		},
	})
}

export function showToastError(baseMessage?: string, error?: any): void {
	const defaultMessage = baseMessage ?? '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò•'
	const actualErrorMessage = getErrorMessage(error)
	toast.error(
		React.createElement(
			'div',
			null,
			React.createElement('span', null, defaultMessage),
			actualErrorMessage && React.createElement('br'),
			actualErrorMessage &&
				React.createElement(
					'small',
					{ style: { opacity: 0.8, display: 'block', marginTop: '4px' } },
					actualErrorMessage
				)
		)
	)
}
